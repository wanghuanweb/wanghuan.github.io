第六章：文本属性
text-indent:文本缩进，应用于块级元素，有继承性，但若想行内元素第一行缩进，则需要使用内边距或者外边距达到效果。
  ps：但需要注意text-indent继承计算值，而不是声明值。
  eg：例子中inner和p都缩进50px，所以继承的是计算值，而不是10%
  div#outer{
    width: 500px;
  }
  div#inner{
    text-indent: 10%;
  }
  p{
    width:200px;
  }
  <div id="outer">
    <div id="inner">
      <p></p>
    </div>
  </div>
text-align:文本水平对齐，应用于块级元素（p元素），有继承性。
line-height:行高，行高-字体大小=行间距。
vertical-align:垂直对齐，应用于行内元素和替换元素，不能继承；vertical-align：sub，super是元素的下标或上标，top和bottom
word-spacing:字间隔，应用于所有元素，有继承性
letter-spacing:字母间隔，应用于所有元素，有继承性，
text-transform:文本转换转换大小写等，应用于所有元素，有继承性
text-decoration:文本装饰，应用于所有元素，无继承性，eg：a标签有下划线，可以将值设为none则没下划线
text-shadow:文本阴影，应用于所有元素，无继承性

第七章：基本视觉格式化

基本概念：
  正常流：指的是文本从左到右、从上到下显示，也就是传统HTML的文本布局，大多数元素都在正常流中，但是若想让元素不在正常流中，唯一方法就是变成浮动或者定位元素
  行内元素：指strong和span之类的元素，不会产生行分隔符，通过声明display:inline;可以让元素生成一个行内框。
  块级元素：指段落、标题或者div之类的元素，会在框前和后产生换行，所以在正常流的块级元素会垂直放置，通过声明display:block可以让元素生成块级框
  根元素：位于文档树顶端的元素，HTML中就是元素html
块级元素：
  了解盒子模型：margin外边距，border边框，padding内边距，element元素
  水平格式化（7大属性）：父元素width=子元素margin-left+border-left+padding-left+width+padding-right+border-right+margin-right
  ps：7个属性中，width、margin-left、margin-right可以设置为auto，其他均不可设置为auto，可以设定为特定的值或者默认宽度0
      外边距可以小于0，内边距、边框和内容宽度绝对不能为负。
  垂直格式化（7大属性）：父元素height=子元素margin-top+border-top+padding-top+height+padding-bottom+border-bottom+margin-bottom
  ps：7个属性中，height、margin-top、margin-bottom可以设置为auto，其他均不可设置为auto，可以设定为特定的值或者默认宽度0
      外边距可以小于0，内边距、边框和内容宽度绝对不能为负。
行内元素：
改变元素显示：
  display:block;//或生成一个块级框
  display:inline;//改变角色，让块状元素改为行内元素，会生成一个行内框
  display:inline-block;//行内块元素，是行内元素和块状元素的混合，
  display:run-in;//run-in框会格式化成另外一个元素的行内框。但仍然从文档中的父元素继承属性
   eg:则h3会在p前边，看似是一个行内元素，但还是颜色为sliver而不是black
   <div>
    <h3>A</h3>
    <p>B</p>
   </div>
   div{
     color: sliver;
   }
   h3{
     display: run-in;
     border: 1px dotted;
   }
   p{
     color: black;
   }

第八章：内边距、边框和外边距
第10章：浮动和定位
浮动float：会以某种方式将浮动元素从文档的正常流中删除，但却还会影响布局。
         浮动元素左（或右）外边界不能超出其包含块的左（右）内边界；
         浮动元素的左（右）外边界必须是源文档中之前出现的左浮动（右浮动）元素的右（左）外边界，可以防止覆盖
定位position：使用定位，可以准确的定义元素框相对于其正常位置应该出现在哪里，或者相对于父元素，另一个元素甚至浏览器窗口本身的位置。
  position值：


css的优先级机制：
  多重样式multiple style（优先级：外部样式external style sheet < 内部样式internal style sheet < 内联样式inline style）
  选择器的优先权：
  内联样式表的权重为1000 + ID选择器的权重100 + 类选择器的权重10 + HTML标签选择器的权重是1
  <style type="text/css">
        #redP p {
             /* 权值 = 100+1=101 */
             color:#F00;  /* 红色 */
        }

        #redP .red em {
             /* 权值 = 100+10+1=111 */
             color:#00F; /* 蓝色 */

        }

        #redP p span em {
             /* 权值 = 100+1+1+1=103 */
             color:#FF0;/*黄色*/
        }
    </style>

  CSS优先级法则：
  A  选择器都有一个权值，权值越大越优先；
  B  当权值相等时，后出现的样式表设置要优于先出现的样式表设置；
  C  创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；
  D  继承的CSS 样式不如后来指定的CSS 样式；
  E  在同一组属性设置中标有“!important”规则的优先级最大；示例如下：
